{"version":3,"sources":["Components/vis1.svg","Components/BarChart.js","Helpers/sample-any-illness.js","Helpers/sample-specific-illness.js","Components/BarChartNeg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarChart","props","state","isHidden","shouldWrapText","sample","scale","title","group","id","drawChart","bind","prevProps","prevState","this","setState","svg","d3","chart","append","attr","xScale","range","domain","map","s","language","padding","yScale","call","tickSize","tickFormat","selectAll","text","width","each","el","i","word","words","split","reverse","line","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","lineHeight","barGroups","data","enter","checkAdjustmentY","a","value","g","bandwidth","color","on","actual","transition","duration","idx","divergence","toFixed","remove","height","className","key","Math","random","viewBox","Component","colors","AnyIllnessSample","SpecificIllnessSample","BarChartNeg","dataset","maxHeight","d","abs","rangeRound","bars","yAxis","xAxis","style","src","vis","App","activeIdx","handleChange","event","newValue","Typography","variant","component","Tabs","indicatorColor","textColor","onChange","aria-label","Tab","label","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.779d4c7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vis1.8e372d1f.svg\";","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./BarChart.css\";\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHidden: this.props.isHidden,\n      shouldWrapText: true\n    }\n\n    this.sample = this.props.sample;\n    this.scale = this.props.scale;\n    this.title = this.props.title;\n    this.group = this.props.group;\n    this.id = this.props.id;\n  \n    this.drawChart = this.drawChart.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.isHidden !== prevProps.isHidden) {\n      this.setState ({\n        isHidden: this.props.isHidden\n      })\n    }\n    this.drawChart();\n\n    // if (this.state.shouldWrapText) {\n    //   const ticks = d3.select(`#${this.id}`).selectAll(\".tick\");\n    //   ticks.selectAll(\"text\").call(this.wrap, 150);\n    // }\n  }\n\n  componentDidMount() {\n\n    // if (this.state.shouldWrapText) {\n\n    //   const ticks = d3.select(`#${this.id}`).selectAll(\".tick\");\n    //   ticks.selectAll(\"text\").call(this.wrap, 150);\n\n    //   this.setState ({\n    //     shouldWrapText: false\n    //   })\n    // }\n  }\n\n  drawChart() {\n    const svg = d3.select(`#${this.id}`);\n    const margin = 100;\n    const width = 1400 - 2 * margin;\n    const height = 900 - 2 * margin;\n\n    const chart = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin}, ${margin})`);\n\n    const xScale = d3\n      .scaleBand()\n      .range([0, width])\n      .domain(this.sample.map(s => s.language))\n      .padding(0.1);\n\n    const yScale = d3\n      .scaleLinear()\n      .range([height, 0])\n      .domain([0, this.scale]);\n\n    const makeYLines = () => d3.axisLeft().scale(yScale);\n\n    chart\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(xScale));\n\n    chart.append(\"g\").call(d3.axisLeft(yScale));\n\n    chart\n      .append(\"g\")\n      .attr(\"class\", \"grid\")\n      .call(\n        makeYLines()\n          .tickSize(-width, 0, 0)\n          .tickFormat(\"\")\n      );\n\n    \n    const ticks = svg.selectAll(\".tick\");\n    ticks.selectAll(\"text\").call(wrap, 150);\n\n    const barGroups = chart\n      .selectAll()\n      .data(this.sample)\n      .enter()\n      .append(\"g\");\n\n    barGroups\n      .append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", g => xScale(g.language))\n      .attr(\"y\", g => yScale(g.value))\n      .attr(\"height\", g => height - yScale(g.value))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"fill\", g => g.color)\n\n      .on(\"mouseenter\", function(actual, i) {\n        d3.selectAll(\".value\").attr(\"opacity\", 0);\n\n        d3.select(this)\n          .transition()\n          .duration(300)\n          .attr(\"opacity\", 0.6)\n          .attr(\"x\", a => xScale(a.language) - 5)\n          .attr(\"width\", xScale.bandwidth() + 10);\n\n        const y = yScale(actual.value);\n\n        chart\n          .append(\"line\")\n          .attr(\"id\", \"limit\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", y)\n          .attr(\"x2\", width)\n          .attr(\"y2\", y);\n\n        barGroups\n          .append(\"text\")\n          .attr(\"class\", \"divergence\")\n          .attr(\"x\", a => xScale(a.language) + xScale.bandwidth() / 2)\n          .attr(\"y\", a => checkAdjustmentY(a))\n          .attr(\"fill\", \"white\")\n          .attr(\"text-anchor\", \"middle\")\n          .text((a, idx) => {\n            const divergence = (a.value - actual.value).toFixed(1);\n\n            let text = \"\";\n            if (divergence > 0) text += \"+\";\n            text += `${divergence}%`;\n\n            return idx !== i ? text : \"\";\n          });\n      })\n      .on(\"mouseleave\", function() {\n        d3.selectAll(\".value\").attr(\"opacity\", 1);\n\n        d3.select(this)\n          .transition()\n          .duration(300)\n          .attr(\"opacity\", 1)\n          .attr(\"x\", a => xScale(a.language))\n          .attr(\"width\", xScale.bandwidth());\n\n        chart.selectAll(\"#limit\").remove();\n        chart.selectAll(\".divergence\").remove();\n      });\n\n    barGroups\n      .append(\"text\")\n      .attr(\"class\", \"value\")\n      .attr(\"x\", a => xScale(a.language) + xScale.bandwidth() / 2)\n      .attr(\"y\", a => checkAdjustmentY(a))\n      .attr(\"text-anchor\", \"middle\")\n      .text(a => `${a.value}%`);\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", -(height / 2) - margin)\n      .attr(\"y\", margin / 2.4)\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"text-anchor\", \"middle\")\n      .text(\"Prevalence (in %)\");\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", width / 2 + margin)\n      .attr(\"y\", height + margin * 2.5)\n      .attr(\"text-anchor\", \"middle\")\n      .text(this.group);\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"title\")\n      .attr(\"x\", width / 2 + margin)\n      .attr(\"y\", 40)\n      .attr(\"text-anchor\", \"middle\")\n      .text(this.title);\n\n    svg\n      .append(\"text\")\n      .attr(\"class\", \"source\")\n      .attr(\"x\", width - margin * 2.5)\n      .attr(\"y\", height + margin * 3)\n      .attr(\"text-anchor\", \"start\")\n      .text(\"Source: National Alliance on Mental Illness\");\n\n      function checkAdjustmentY(a) {\n        if (a.value <= 2) {\n          return yScale(a.value) - 10;\n        } else {\n          return yScale(a.value) + 50;\n        }\n      }\n\n      function wrap(text, width) {\n        text.each(function(el, i) {\n          const text = d3.select(this);\n          let words = text\n              .text()\n              .split(/\\s+/)\n              .reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.2, // ems\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text\n              .text(null)\n              .append(\"tspan\")\n              .attr(\"x\", 0)\n              .attr(\"y\", y)\n              .attr(\"dy\", dy + \"em\");\n              \n          while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text\n                .append(\"tspan\")\n                .attr(\"x\", 0)\n                .attr(\"y\", y * line)\n                .attr(\"dy\", lineHeight + \"em\")\n                .text(word);\n            }\n          }\n        });\n      }\n  }\n\n  render() {\n    return (\n      <div className={this.state.isHidden ? 'is-hidden container' : 'container'}>\n        <svg key={Math.random()} id={this.id} viewBox=\"0 0 1400 1000\"></svg>\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n","const colors = ['#f0f9e8','#ccebc5','#a8ddb5','#7bccc4','#4eb3d3','#2b8cbe','#08589e'];\nconst AnyIllnessSample = [\n  {\n    language: 'All adults',\n    value: 19,\n    color: colors[0]\n  },\n  {\n    language: 'Asian adults',\n    value: 15,\n    color: colors[1]\n  },\n  {\n    language: 'Black adults',\n    value: 16,\n    color: colors[2]\n  },\n  {\n    language: 'Hispanic or Latin adults',\n    value: 17,\n    color: colors[3]\n  },\n  {\n    language: 'White adults',\n    value: 20,\n    color: colors[4]\n  },\n  {\n    language: 'Adult, who report mixed / multiracial',\n    value: 27,\n    color: colors[5]\n  },\n  {\n    language: 'Lesbian, gay and bisexual adults',\n    value: 37,\n    color: colors[6]\n  }\n];\n\nexport default AnyIllnessSample;","const colors = [\n    \"#feebe2\",\n    \"#fcc5c0\",\n    \"#fa9fb5\",\n    \"#f768a1\",\n    \"#dd3497\",\n    \"#ae017e\",\n    \"#7a0177\"\n  ];\n\nconst SpecificIllnessSample = [\n    {\n      language: 'Anxiety disorders',\n      value: 19,\n      color: colors[0]\n    },\n    {\n      language: 'Post-traumatic Stress Disorder',\n      value: 4,\n      color: colors[1]\n    },\n    {\n        language: 'Dual diaggnosis',\n        value: 4,\n        color: colors[3]\n    },\n    {\n      language: 'Depression',\n      value: 7,\n      color: colors[2]\n    },\n    {\n      language: 'Schizophrenia',\n      value: 1,\n      color: colors[4]\n    },\n    {\n      language: 'Borderline Personality Disorder',\n      value: 1,\n      color: colors[5]\n    },\n    {\n      language: 'Obsessive Compulsive Disorder',\n      value: 1,\n      color: colors[6]\n    }\n  ];\n\n  export default SpecificIllnessSample;","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./BarChartNeg.css\";\nimport vis from './vis1.svg';\n\nclass BarChartNeg extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHidden: this.props.isHidden\n    };\n\n    this.sample = this.props.sample;\n    this.id = this.props.id;\n    this.drawChart = this.drawChart.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.isHidden !== prevProps.isHidden) {\n      this.setState({\n        isHidden: this.props.isHidden\n      });\n    }\n  }\n\n  componentDidMount() {\n    //this.drawChart();\n  }\n\n  drawChart() {\n    const margin = 100;\n    const width = 1400 - 2 * margin;\n    const height = 900 - 2 * margin;\n\n    const svg = d3.select(`#${this.id}`);\n\n    const chart = svg\n      .append(\"g\") //add group to leave margin for axis\n      .attr(\"transform\", `translate(${margin}, ${margin})`);\n\n    const dataset = d3.csvParse(this.sample);\n    const maxHeight = d3.max(dataset, function(d) {\n      return Math.abs(d);\n    });\n\n    const minHeight = d3.min(dataset, function(d) {\n      return Math.abs(d);\n    });\n\n    //set y scale\n    const yScale = d3\n      .scaleLinear()\n      .rangeRound([0, height])\n      .domain([maxHeight, -maxHeight]); //show negative\n    //add x axis\n    const xScale = d3\n      .scaleBand()\n      .rangeRound([0, width])\n      .padding(0.1); //scaleBand is used for  bar chart\n    xScale.domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); //value in this array must be unique\n    /*if domain is specified, sets the domain to the specified array of values. The first element in domain will be mapped to the first band, the second domain value to the second band, and so on. Domain values are stored internally in a map from stringified value to index; the resulting index is then used to determine the band. Thus, a band scale’s values must be coercible to a string, and the stringified version of the domain value uniquely identifies the corresponding band. If domain is not specified, this method returns the current domain.*/\n\n    const bars = chart\n      .selectAll(\"rect\")\n      .data(dataset)\n      .enter()\n      .append(\"rect\");\n    bars\n      .attr(\"x\", function(d, i) {\n        return xScale(i); //i*(width/dataset.length);\n      })\n      .attr(\"y\", function(d) {\n        if (d < 0) {\n          return height / 2;\n        } else {\n          return yScale(d);\n        }\n      }) //for bottom to top\n      .attr(\"width\", xScale.bandwidth() /*width/dataset.length-barpadding*/)\n      .attr(\"height\", function(d) {\n        return height / 2 - yScale(Math.abs(d));\n      });\n    bars.attr(\"fill\", function(d) {\n      if (d >= 0) {\n        return \"green\";\n      } else {\n        return \"orange\";\n      }\n    });\n\n    //add tag to every bar\n    const tags = chart\n      .selectAll(\"text\")\n      .data(dataset)\n      .enter()\n      .append(\"text\")\n      .text(function(d) {\n        return d;\n      });\n    tags\n      .attr(\"x\", function(d, i) {\n        return xScale(i) + 8;\n      })\n      .attr(\"y\", function(d) {\n        if (d >= 0) {\n          return yScale(d) + 12;\n        } else {\n          return height - yScale(Math.abs(d)) - 2;\n        }\n      }) //for bottom to top\n      .attr(\"fill\", \"white\");\n\n    //add x and y axis\n    const yAxis = d3.axisLeft(yScale);\n    chart.append(\"g\").call(yAxis);\n\n    const xAxis = d3.axisBottom(xScale); /*.tickFormat(\"\");remove tick label*/\n    chart\n      .append(\"g\")\n      .call(xAxis)\n      .attr(\"transform\", \"translate(0,\" + height / 2 + \")\");\n\n    //add label for x axis and y axis\n    chart\n      .append(\"text\")\n      .text(\"Y Label\")\n      .attr(\"x\", 0 - height / 2)\n      .attr(\"y\", 0 - margin / 2)\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"transform\", \"rotate(-90)\");\n    svg\n      .append(\"text\")\n      .text(\"X Label\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height + margin / 2)\n      .style(\"text-anchor\", \"middle\");\n  }\n\n  render() {\n    return (\n      <div\n        className={this.state.isHidden ? \"is-hidden container\" : \"container\"}>\n        <img src={vis} />\n      </div>\n    );\n  }\n}\n\nexport default BarChartNeg;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport BarChart from './Components/BarChart';\nimport AnyIllnessSample from './Helpers/sample-any-illness';\nimport SpecificIllnessSample from './Helpers/sample-specific-illness';\nimport 'typeface-roboto';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport BarChartNeg from \"./Components/BarChartNeg\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeIdx: 0,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event, newValue) {\n    this.setState({\n      activeIdx: newValue\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Typography variant=\"h2\" component=\"h2\">\n          Data Visualization Assignment 1\n        </Typography>\n        <Typography variant=\"p\" component=\"p\">\n          Built using D3.js, React.js, MaterialUI and Github pages.\n        </Typography>\n        <Tabs\n          value={this.state.activeIdx}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={this.handleChange}\n          aria-label=\"vis tabs\" >\n          <Tab label=\"Visualization 1\" />\n          <Tab label=\"Visualization 2\" />\n        </Tabs>\n        <BarChartNeg  value={this.state.activeIdx}\n                      index={0}\n                      id=\"uk-immigration\"\n                      isHidden={this.state.activeIdx !== 0 }></BarChartNeg>\n        <BarChart title=\"12 month prevalence of any mental illness (all U.S. adults)\"\n                      group=\"Adult groups\"\n                      value={this.state.activeIdx}\n                      index={1}\n                      isHidden={this.state.activeIdx !== 1 }\n                      sample={AnyIllnessSample}\n                      scale={40}\n                      id=\"any-illness\"></BarChart>\n        <BarChart title=\"12 month prevalence of common mental illnesses (all U.S. adults)\"\n                    value={this.state.activeIdx}\n                    index={1}\n                    isHidden={this.state.activeIdx !== 1}\n                    group=\"Illnesses\"\n                    sample={SpecificIllnessSample}\n                    scale={20}\n                    id=\"specific-illness\"></BarChart>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}